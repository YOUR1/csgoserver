#!/bin/bash
# Counter Strike: Global Offensive 
# Server Management Script
# Author: Daniel Gibbs & Youri van den Bogert
# Website: http://danielgibbs.co.uk
# Version: 190313

### Variables ####
## Server settings
tickrate=128
portnumber=27015


# Notification Email
# (on|off)
emailnotification="off"
email="some@email.com"

# Start vars
defaultmap="de_dust2"
parms="-console -game csgo -usercon -tickrate ${tickrate} -port ${portnumber} +game_type 0 +game_mode 0 +mapgroup mg_bomb +map ${defaultmap}"

# Steam
appid="740"

# Directorys
rootdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
filesdir="${rootdir}/csgo"

# Server names
servicename="csgo-server"
gamename="Counter Strike: Global Offensive"
servername=`grep -s hostname ${filesdir}/csgo/cfg/server.cfg | sed 's/hostname //g'|sed 's/"//g'`

# Logging
logdir="${rootdir}/log"
logfile="${logdir}/${servicename}.log"
logfiledate="${logdir}/${servicename}-$( date '+%d-%m-%Y-%H-%M-%S').log"
logdays="7"

##### Script #####
# Do not edit 
# unless you know 
# what you are doing

fn_rootcheck(){
if [ `whoami` = "root" ];then
	echo -e "[\e[0;31m FAIL\e[0;39m ] Script will not run as root!"
	exit
fi
}

fn_syscheck(){
if [ ! -e ${filesdir} ];then
	echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: cannot access ${filesdir}: No such directory"
	exit
fi
}

fn_runcheck(){
# already running check
pidwc=`screen -ls |grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
if [ ${pidwc} -eq 1 ];then
	echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${servername} is already running"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} is already running" >> ${logfile}
	exit
# multiple of same instance check
elif [ ${pidwc} -ge 2 ];then
	echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: ${servername} is running ${pidwc} times"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} is running ${pidwc} times" >> ${logfile}
	echo -e "[\e[0;32m  OK\e[0;39m  ] ${servicename}: ${servername} stopping all ${pidwc} instances"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} stopping all ${pidwc} instances" >> ${logfile}
	fn_stopserver
	exit
fi
}

fn_distro(){
arch=$(uname -m)
kernel=$(uname -r)
if [ -f /etc/lsb-release ]; then
	os=$(lsb_release -s -d)
elif [ -f /etc/debian_version ]; then
	os="Debian $(cat /etc/debian_version)"
elif [ -f /etc/redhat-release ]; then
	os=`cat /etc/redhat-release`
else
	os="$(uname -s) $(uname -r)"
fi
}

fn_uptime(){
uptime=$(</proc/uptime)
uptime=${uptime%%.*}
minutes=$(( uptime/60%60 ))
hours=$(( uptime/60/60%24 ))
days=$(( uptime/60/60/24 ))
}

fn_load(){
load=$(uptime | awk -F 'load average' '{ print $2 }') 
}

fn_emailnotification(){
fn_distro
fn_uptime
fn_load
{
echo -e "=========================================\nServer information\n=========================================\n"
echo -e "Date: $(date)"
echo -e "Distro: ${os}" 
echo -e "Arch: ${arch}"
echo -e "Kernel: ${kernel}"
echo -e "Hostname: $HOSTNAME"  
echo -e "Uptime: ${days}d, ${hours}h, ${minutes}m"  
echo -e "Avg Load${load}\n" 
echo -e "=========================================\n${servicename} statistics\n=========================================\n"
echo -e "Service: ${servicename}"
echo -e "Server: ${servername}"
echo -e "Failure reason: ${failurereason}"
echo -e "Action Taken: ${actiontaken}\n"
echo -e "=========================================\n${servicename} log summary\n=========================================\n"
}|tee ${logdir}/${servicename}-email.log > /dev/null 2>&1
tail -50 ${logfile} >> /${logdir}/${servicename}-email.log
mail -s "${subject}" ${email} < /${logdir}/${servicename}-email.log
echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: Sent email notification to ${email}"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} sent email notification to ${email}" >> ${logfile}
}

fn_emailtest(){
fn_rootcheck
fn_syscheck
echo -e "[\e[0;32m  OK\e[0;39m  ] ${servicename}: Email test notification: ${servername}"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} email test notification" >> ${logfile}
if [ "${emailnotification}" = "on" ];then
	subject="${servicename} email test notification - testing ${servername}"
	failurereason="Testing ${servicename} email notification"
	actiontaken="Sent test email...hello is this thing on?"
	fn_emailnotification
else 
	echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: email notificaion not enabled"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} email notificaion not enabled" >> ${logfile}
fi
}

fn_logmanager(){
#Log manager will active if finds logs older than $logdays
if [ `find ${logdir}* -mtime +${logdays} |wc -l` -ne "0" ];then
	echo -e "[\e[0;32m  OK\e[0;39m  ] Starting log cleaner"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Starting log cleaner" >> ${logfile}
	echo -e "[\e[0;36m INFO\e[0;39m ] Removing logs older than ${logdays} days"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Removing logs older than ${logdays} days" >> ${logfile}
	find ${logdir}* -mtime +${logdays} |tee >> ${logfile}
	count=`find ${logdir}* -mtime +${logdays}|wc -l`
	find ${logdir}* -mtime +${logdays} -exec rm {} \;
	echo -e "[\e[0;36m INFO\e[0;39m ] Log cleaner removed ${count} log files"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Log cleaner removed ${count} log files" >> ${logfile}
fi
}

fn_restartserver(){
	echo -e "[\e[0;32m  OK\e[0;39m  ] Restarting ${servicename}: ${servername}"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Restarting ${servername}" >> ${logfile}
	fn_stopserver
	sleep 1
	fn_startserver
}

fn_startserver(){
fn_rootcheck
fn_syscheck
fn_runcheck
fn_logmanager
cd ${filesdir}
echo -e "[\e[0;32m  OK\e[0;39m  ] Starting ${servicename}: ${servername}"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Starting ${servername}" >> ${logfile}
cp ${logfile} ${logfiledate}
screen -d -m -S ${servicename} ${filesdir}/srcds_run ${parms}
sleep 1
pidwc=`screen -ls |grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'|wc -l`
if [ ${pidwc} -eq 0 ];then
	echo -e "[\e[0;31m FAIL\e[0;39m ] ${servicename}: ${servername} failed to start"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} failed to start" >> ${logfile}
fi
}

fn_stopserver(){
fn_rootcheck
fn_syscheck
pid=`screen -ls |grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'`
if [ -z ${pid} ];then
	echo -e "[\e[0;36m INFO\e[0;39m ] ${servicename}: ${servername} is already stopped"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: ${servername} is already stopped" >> ${logfile}
else
	echo -e "[\e[0;32m  OK\e[0;39m  ] Stopping ${servicename}: ${servername}"
	echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Stopping ${servername}" >> ${logfile}
	kill `screen -ls |grep ${servicename} |awk -F . '{print $1}'|awk '{print $1}'`
	screen -wipe > /dev/null 2>&1
fi
}

fn_monitorserver(){
fn_rootcheck
fn_syscheck
fn_logmanager
echo -e "[\e[0;32m  OK\e[0;39m  ] Checking ${servicename}: ${servername}"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Checking ${servername}" >> ${logfile}
fn_runcheck
echo -e "[\e[1;33m WARN\e[0;39m ] ${servicename}: Monitor detected ${servername} had stopped!"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Monitor detected ${servername} had stopped!" >> ${logfile}
if [ "${emailnotification}" = "on" ];then
	subject="${servicename} Monitor - Starting ${servername}"
	failurereason="${servername} had stopped"
	actiontaken="restarted ${servername}"
	fn_emailnotification
fi
fn_startserver
}

fn_updateserver(){
fn_rootcheck
fn_syscheck
echo -e "[\e[0;32m  OK\e[0;39m  ] Updating ${servicename}: ${servername}"
echo -e "$( date '+%b %d %H:%M:%S') ${servicename}: Updating ${servername}" >> ${logfile}
cd ${rootdir}
cd steamcmd
./steamcmd.sh +login anonymous +force_install_dir ${filesdir} +app_update ${appid} validate +quit |tee -a ${logfile}
}

#
##Installer
#

fn_header(){
clear
echo "================================="
echo "${gamename}"
echo "Server Linux Installer"
echo "by Daniel Gibbs"
echo "http://danielgibbs.co.uk"
echo "================================="
echo ""
}

fn_steamdl(){
echo "Installing Steam"
echo "================================="
cd ${rootdir}
mkdir steamcmd
cd steamcmd
if [ ! -f steam.sh ];then
	wget http://blog.counter-strike.net/wp-content/uploads/2012/04/steamcmd.tar.gz
	tar --verbose -zxf steamcmd.tar.gz
	rm -v steamcmd.tar.gz
	chmod +x steam.sh
else
	echo "Steam already installed!"
fi
}

fn_retryinstall(){
while true; do
	read -p "Retry install? [y/N]" yn
	case $yn in
	[Yy]* ) fn_install;;
	[Nn]* ) echo Exiting; exit ;;
	* ) echo "Please answer yes or no.";;
	esac
done
}

fn_install(){
fn_rootcheck
fn_header
if [ -d ${filesdir} ];then
	echo "${gamename} Server is already installed here:"
	pwd
	echo ""
	while true; do
		read -p "Continue [y/N]" yn
		case $yn in
		[Yy]* ) break;;
		[Nn]* ) echo Exiting; return 1 ;;
		* ) echo "Please answer yes or no.";;
		esac
	done
fi
fn_header
echo "Install Directory:"
pwd
echo ""
while true; do
	read -p "Continue [y/N]" yn	
	case $yn in
	[Yy]* ) break;;
	[Nn]* ) echo Exiting; return 1 ;;
	* ) echo "Please answer yes or no.";;
    esac
done
fn_header
fn_steamdl
echo ""
echo "Installing ${gamename} Server"
echo "================================="
	cd ${rootdir}/steamcmd
	mkdir -v ${filesdir}
	mkdir -v ${logdir}
	touch install.txt
	chmod 0600 install.txt
	echo "login anonymous" > install.txt
	echo "force_install_dir ${filesdir}" >> install.txt
	echo "app_update ${appid} validate" >> install.txt
	echo "quit" >> install.txt
	STEAMEXE=steamcmd ./steam.sh +runscript install.txt
	rm install.txt
	echo ""
	echo "================================="
	while true; do
		read -p "Was the install successful? [y/N]" yn
		case $yn in
		[Yy]* ) break;;
		[Nn]* ) fn_retryinstall ;;
		* ) echo "Please answer yes or no.";;
		esac
	done
echo ""
echo "Configuring ${gamename} Server"
echo "================================="
	read -p "Enter rcon password: " rconpass
	read -p "Enter server name: " servername
	echo "creating server.cfg"
	touch /${filesdir}/csgo/cfg/server.cfg
	{
	echo -e "hostname \"${servername}\""
	echo -e "rcon_password \"${rconpass}\""
	echo -e "sv_password \"\" //Only set this if you intend to have a private server!"
	}|tee /${filesdir}/csgo/cfg/server.cfg  > /dev/null 2>&1
	echo ""
	hostname=`grep -s hostname /${filesdir}/csgo/cfg/server.cfg | sed 's/hostname //g'|sed 's/"//g'`
	rcon=`grep -s rcon_password /${filesdir}/csgo/cfg/server.cfg | sed 's/rcon_password //g'|sed 's/"//g'`
	echo "${gamename} Server Details"
	echo "================================="
	echo "Server hostname: ${hostname}"
	echo "Rcon password: ${rcon}"
	echo "Server IP: localhost:27015"
	echo "You can edit these in server.cfg:"
	echo "${filesdir}/csgo/cfg/server.cfg"
	echo ""
	echo "================================="
	echo "Install Complete!"
	echo ""
	echo "To start server type:"
	echo "./csgoserver start"
}

case "$1" in
	start)
		fn_startserver;;
	stop)
		fn_stopserver;;
	restart)
		fn_restartserver;;
	update)
		fn_stopserver
		fn_updateserver
		fn_startserver;;
	monitor)
		fn_monitorserver;;
	email-test)
		fn_emailtest;;
	install)
		fn_install;;
	*)
		echo "Usage: $0 {start|stop|restart|update|monitor|email-test|install}"
		exit 1;;
esac
exit
